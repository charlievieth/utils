# Format of this file is YAML
# Minimum clang-format version required: clang-format version 3.6.0
# Detailed description of options available at http://clang.llvm.org/docs/ClangFormatStyleOptions.html

# WARN: this does not work as expected see:
# MacroBlockBegin: "#ifn?(def)?"
# MacroBlockEnd: "#endif"

AlignConsecutiveMacros: true
# This will align C/C++ preprocessor macros of consecutive lines:
#
# #define SHORT_NAME       42
# #define LONGER_NAME      0x007f
# #define EVEN_LONGER_NAME (2)
# #define foo(x)           (x * x)
# #define bar(y, z)        (y + z)

AlignEscapedNewlines: Left
# Align escaped newlines as far left as possible.
# #define A   \
#   int aaaa; \
#   int b;    \
#   int dddddddddd;

AlignEscapedNewlinesLeft: true
# Bad:
# void foo() {
#        someFunction();
#  someOtherFunction();
# }
# Good:
# void foo() {
#    someFunction();
#    someOtherFunction();
# }

AlignTrailingComments: true
# align all comments to right based of //
# == Avoid using // based comments altogether ==

AllowAllParametersOfDeclarationOnNextLine: true
# allow funtion definition as
# someFunction(foo,
#             bar,
#             baz);

AlignConsecutiveAssignments:  false
# aligns consecutive assignments with '=' operator

AllowShortBlocksOnASingleLine: true
# single statement block can be merged on one line
# e.g if (a) { return; }

AllowShortCaseLabelsOnASingleLine: false
# Single statement case statements should be on their own lines

AllowShortFunctionsOnASingleLine: None
# Bad:
# int foo() { return 123; }

AllowShortIfStatementsOnASingleLine: false
# Bad:
# if (someOtherVar) return;
# Good:
# if (someOtherVar)
#     return;

AllowShortLoopsOnASingleLine: false
# Bad:
# while(i>0) i--;
# Good:
# while(i>0) {
#         i--;
#     }

AlwaysBreakAfterDefinitionReturnType: false
# previously: true
# Ensures return type is one its own line
# e.g. unsigned int
# function(char param) { }

AlwaysBreakBeforeMultilineStrings: false
# previously: true

BinPackArguments: true
BinPackParameters: false
# functions arguments should all be on one line or have a single line for each param

BreakBeforeBinaryOperators: None
# break for new line after binary operator in case of length is over ColumnLimit
# e.g.
# int foo = bar +
#           baz;

BreakBeforeTernaryOperators: false

# BreakBeforeBraces: Linux
BreakBeforeBraces: Attach
# Always attach braces to surrounding context except -
# break before braces on function, namespace and class definitions

ColumnLimit: 100
# every body has wide screen now. 100 seems to be reasonable limit now.

IndentCaseLabels: false
# case labels have same indentation as switch statement.

IndentWidth: 4
# 4 spaces for indentation
TabWidth: 4
# tabwidth is 4 spaces

UseTab: ForIndentation
# tab for indentation only. All alignment should happen with spaces
# Simple rule to check.
# No tabs allowed after first 'non-tab' character in a line

IndentWrappedFunctionNames: false
KeepEmptyLinesAtTheStartOfBlocks: false
# remove excess empty lines at start of blocks.

MaxEmptyLinesToKeep: 1

PointerAlignment: Right
# previously used Middle

ReflowComments: true

# WARN WARN WARN
SortIncludes: true

SpaceAfterCStyleCast: false
# No space after (cast). E.g
# int blah = (int)((void *)foo + bar)

SpaceBeforeAssignmentOperators: true
# Assignment = should be seperated by spaces on both sides.

SpaceBeforeParens: ControlStatements
# for control statements a space is required before '('
# Bad: for() { statement; }
# Good: for () { statement; }
# This setting distinguishes functions() from keywords like 'if' and 'for'.

SpaceInEmptyParentheses: false
# No spaces required for empty ()

SpacesInCStyleCastParentheses: false
# No spaces required for (unsigned int) type cast

SpacesInParentheses: false

SpacesInSquareBrackets: false
# No spaces in [count] style invocations of []
